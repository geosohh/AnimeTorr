# -*- coding: utf-8 -*-
"""
Add anime window.
"""
__author__ = 'Sohhla'


import os
from PyQt4 import QtCore
from qt.add import Ui_Dialog as Ui_Add
from downloader.downloader import Downloader
from message_box import *
from shared import constant
from shared import db
from shared import torrent_application
from shared.strings import *
from shared.log import LoggerManager


class WindowAdd():
    """
    Creates Add anime window.
    """

    def __init__(self, parent_window, main, editing=False, anime_to_edit=None):
        self.dialog_add = WindowAddDialog(self,parent_window, QtCore.Qt.WindowSystemMenuHint |
                                                              QtCore.Qt.WindowMaximizeButtonHint |
                                                              QtCore.Qt.WindowTitleHint |
                                                              QtCore.Qt.Window)
        self.ui_add = Ui_Add()
        self.ui_add.setupUi(self.dialog_add)
        self.main_window = main
        self.editing = editing
        self.anime_to_edit = anime_to_edit

        self.log = LoggerManager().get_logger("Add Anime")

        self.ui_add.text_episode.setValidator(QtGui.QIntValidator(1, 999))

        # To show different messages in the information box explaining what each item does
        self.ui_add.label_name.installEventFilter(self.dialog_add)
        self.ui_add.label_search.installEventFilter(self.dialog_add)
        self.ui_add.label_episode.installEventFilter(self.dialog_add)
        self.ui_add.text_name.installEventFilter(self.dialog_add)
        self.ui_add.text_search.installEventFilter(self.dialog_add)
        self.ui_add.text_episode.installEventFilter(self.dialog_add)
        self.ui_add.checkbox_anime_index.installEventFilter(self.dialog_add)
        self.ui_add.checkbox_anime_tosho.installEventFilter(self.dialog_add)
        self.ui_add.checkbox_anirena.installEventFilter(self.dialog_add)
        self.ui_add.checkbox_nyaa.installEventFilter(self.dialog_add)
        self.ui_add.checkbox_tokyotosho.installEventFilter(self.dialog_add)
        self.ui_add.tabWidget.installEventFilter(self.dialog_add)
        self.ui_add.groupbox_anime_folder.installEventFilter(self.dialog_add)

        # Connect buttons/radio
        self.ui_add.button_search.clicked.connect(self.button_search_clicked)
        self.ui_add.button_add.clicked.connect(self.button_add_clicked)
        self.ui_add.button_anime_folder.clicked.connect(self.button_anime_folder_clicked)
        self.ui_add.radio_use_default_anime_folder.toggled.connect(self.radio_use_default_anime_folder_toggled)

        try:
            # "Loagind" GIF shown while searching. Generated by http://ajaxload.info
            self.loading_movie = QtGui.QMovie(":/images/images/loading.gif")
            self.log.debug("loading="+str(self.loading_movie))
            self.log.debug("loading none:"+str(self.loading_movie is None))
            self.log.debug("loading False:"+str(self.loading_movie is False))
        except Exception as error:
            self.log.print_traceback(error,self.log.error)

        # To control if the user changed the search terms but didn't click [Search].
        # Used to remove special characters from the search terms (see shared.strings.remove_special_chars()).
        # Tried using the self.ui_add.text_search.textChanged signal, but it was being emitted even without any changes being made...
        self.last_text_search_checked = ""

        # Requests search
        self.thread_anime_index = None
        self.thread_anime_tosho = None
        self.thread_anirena = None
        self.thread_nyaa = None
        self.thread_tokyotosho = None
        self.downloader_anime_index = None
        self.downloader_anime_tosho = None
        self.downloader_anirena = None
        self.downloader_nyaa = None
        self.downloader_tokyotosho = None
        self.dict_anime_index = None
        self.dict_anime_tosho = None
        self.dict_anirena = None
        self.dict_nyaa = None
        self.dict_tokyotosho = None
        self.anime_being_searched = None

        # Configure "Anime download folder" widgets
        self.default_anime_folder = db.DBManager().get_config().anime_folder
        self.has_default_folder = os.path.isdir(self.default_anime_folder)  # just for convenience
        if self.has_default_folder:
            radio_text = read_qt_text(self.ui_add.radio_use_default_anime_folder.text())
            self.ui_add.radio_use_default_anime_folder.setText("%s (%s)" % (radio_text,self.default_anime_folder))
            self.ui_add.radio_use_default_anime_folder.setChecked(True)
        else:
            self.ui_add.radio_use_default_anime_folder.setText("There is no default folder configured. You can select one in [Options].")
            self.ui_add.radio_use_another_anime_folder.setChecked(True)

        if self.editing:
            self.ui_add.text_name.setText(self.anime_to_edit.name)
            self.ui_add.text_search.setText(self.anime_to_edit.search_terms)
            self.last_text_search_checked = self.anime_to_edit.search_terms
            self.ui_add.text_episode.setText(str(self.anime_to_edit.episode))
            self.ui_add.checkbox_anime_index.setChecked(self.anime_to_edit.check_anime_index)
            self.ui_add.checkbox_anime_tosho.setChecked(self.anime_to_edit.check_anime_tosho)
            self.ui_add.checkbox_anirena.setChecked(self.anime_to_edit.check_anirena)
            self.ui_add.checkbox_nyaa.setChecked(self.anime_to_edit.check_nyaa)
            self.ui_add.checkbox_tokyotosho.setChecked(self.anime_to_edit.check_tokyotosho)
            self.ui_add.label_search.setEnabled(True)
            self.ui_add.text_search.setEnabled(True)
            self.ui_add.label_episode.setEnabled(True)
            self.ui_add.text_episode.setEnabled(True)
            self.ui_add.checkbox_anime_index.setEnabled(True)
            self.ui_add.checkbox_anime_tosho.setEnabled(True)
            self.ui_add.checkbox_anirena.setEnabled(True)
            self.ui_add.checkbox_nyaa.setEnabled(True)
            self.ui_add.checkbox_tokyotosho.setEnabled(True)
            self.ui_add.button_add.setEnabled(True)
            self.ui_add.button_add.setText("Save changes")

            if torrent_application.is_utorrent():
                self.ui_add.groupbox_anime_folder.setStyleSheet("")
                self.ui_add.groupbox_anime_folder.setEnabled(True)
                if self.has_default_folder:
                    self.ui_add.radio_use_default_anime_folder.setEnabled(True)
                self.ui_add.radio_use_another_anime_folder.setEnabled(True)
                if self.default_anime_folder != self.anime_to_edit.download_folder:
                    self.ui_add.radio_use_another_anime_folder.setChecked(True)
                    self.ui_add.text_anime_folder.setText(self.anime_to_edit.download_folder)
                elif not self.has_default_folder:
                    self.ui_add.radio_use_another_anime_folder.setChecked(True)

    def show(self):
        """
        Shows Add anime window.
        """
        self.dialog_add.exec_()

    def radio_use_default_anime_folder_toggled(self):
        """
        Controls configuration of specific anime folder.
        """
        if self.ui_add.radio_use_default_anime_folder.isChecked():
            self.ui_add.text_anime_folder.setEnabled(False)
            self.ui_add.button_anime_folder.setEnabled(False)
        else:
            self.ui_add.text_anime_folder.setEnabled(True)
            self.ui_add.button_anime_folder.setEnabled(True)

    def button_anime_folder_clicked(self):
        """
        Anime download folder selector.
        """
        download_folder = read_qt_text(self.ui_add.text_anime_folder.text())
        if os.path.isdir(download_folder):
            default_path = download_folder
        else:
            default_path = constant.FILEDIALOG_DEFAULT_PATH
        filename = QtGui.QFileDialog.getExistingDirectory(QtGui.QFileDialog(), "Anime download folder", default_path, QtGui.QFileDialog.ShowDirsOnly)
        if os.path.isdir(read_qt_text(filename)):
            self.ui_add.text_anime_folder.setText(filename)

    def button_search_clicked(self):
        """
        If there's no search terms, generates them from the anime's name.
        Disables all fields/buttons and requests search.
        """
        error = False
        name = read_qt_text(self.ui_add.text_name.text().trimmed())
        terms = read_qt_text(self.ui_add.text_search.toPlainText().simplified())
        if len(name)==0 and len(terms)==0:
            show_ok_message("No name","First type the anime's name, then click [Search].")
            error = True
        elif len(terms)==0:
            terms = remove_special_chars(name)
            if len(terms)==0:
                show_ok_message("No search terms","The anime name contains only special characters.\n"
                                                  "No search terms could be extracted from it.\n"
                                                  "Please edit the name, it must contain letters and/or numbers.")
                error = True
            else:
                self.ui_add.text_search.setText(terms)
                self.last_text_search_checked = terms
        elif len(terms)>0:
            new_terms = remove_special_chars(terms)
            self.ui_add.text_search.setText(new_terms)
            terms = new_terms
            self.last_text_search_checked = terms

        search_anime_index = self.ui_add.checkbox_anime_index.isChecked()
        search_anime_tosho = self.ui_add.checkbox_anime_tosho.isChecked()
        search_anirena    = self.ui_add.checkbox_anirena.isChecked()
        search_nyaa       = self.ui_add.checkbox_nyaa.isChecked()
        search_tokyotosho = self.ui_add.checkbox_tokyotosho.isChecked()
        if not search_anime_index and not search_anime_tosho and not search_anirena and not search_nyaa and not search_tokyotosho:
            show_ok_message("Select a source","Select at least one site to search.")
            error = True

        if not error:
            self.ui_add.label_name.setEnabled(False)
            self.ui_add.label_search.setEnabled(False)
            self.ui_add.label_episode.setEnabled(False)
            self.ui_add.text_name.setEnabled(False)
            self.ui_add.text_search.setEnabled(False)
            self.ui_add.text_episode.setEnabled(False)
            self.ui_add.checkbox_anime_index.setEnabled(False)
            self.ui_add.checkbox_anime_tosho.setEnabled(False)
            self.ui_add.checkbox_anirena.setEnabled(False)
            self.ui_add.checkbox_nyaa.setEnabled(False)
            self.ui_add.checkbox_tokyotosho.setEnabled(False)
            self.ui_add.button_search.setEnabled(False)
            self.ui_add.tabWidget.setEnabled(False)
            self.ui_add.groupbox_anime_folder.setEnabled(False)
            self.ui_add.groupbox_anime_folder.setStyleSheet("color: rgb(120, 120, 120);")
            self.ui_add.button_add.setEnabled(False)
            anime = db.Anime(search_terms=terms, check_anime_index=search_anime_index, check_anime_tosho=search_anime_tosho,
                             check_anirena=search_anirena, check_nyaa=search_nyaa, check_tokyotosho=search_tokyotosho)
            self.request_search(anime)

    def request_search(self,anime):
        """
        Request search according to options selected.

        :type anime: db.Anime
        :param anime: Contains all options selected (search terms, sites, etc.)
        """
        self.search_started()
        self.anime_being_searched = anime
        if anime.check_anime_index:
            self.request_search_anime_index(anime)
        if anime.check_anime_tosho:
            self.request_search_anime_tosho(anime)
        if anime.check_anirena:
            self.request_search_anirena(anime)
        if anime.check_nyaa:
            self.request_search_nyaa(anime)
        if anime.check_tokyotosho:
            self.request_search_tokyotosho(anime)

    def search_started(self):
        """
        Search started, show "loading" animation on "All" tab.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.connect(self.set_tab_all_icon)  # PyCharm doesn't recognize frameChanged.connect()...
        self.loading_movie.start()
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)

    # TODO: Three methods for each site... How to make all sites use the same three generic methods?
    def request_search_anime_index(self,anime):
        """
        Creates a new thread to seach on this site.

        :type anime: db.Anime
        :param anime: Anime to search for.
        """
        self.thread_anime_index = QtCore.QThread(self.dialog_add)
        self.downloader_anime_index = Downloader()
        self.downloader_anime_index.moveToThread(self.thread_anime_index)
        self.downloader_anime_index.runningSearch.connect(self.searching_anime_index)
        self.downloader_anime_index.searchResult.connect(self.results_anime_index)
        self.downloader_anime_index.finish.connect(self.thread_anime_index.quit)
        self.thread_anime_index.start()
        self.dialog_add.request_search_anime_index.connect(self.downloader_anime_index.execute_once_search_anime_index)
        self.dialog_add.request_search_anime_index.emit(anime)
    def searching_anime_index(self):
        """
        Search started, show "loading" animation on this site's tab.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.connect(self.set_tab_anime_index_icon)  # PyCharm doesn't recognize frameChanged.connect()...
        self.loading_movie.start()
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
    def results_anime_index(self,dict_anime_index):
        """
        Results returned, update window.

        :type dict_anime_index: dict
        :param dict_anime_index: Search results.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.disconnect(self.set_tab_anime_index_icon)  # PyCharm doesn't recognize frameChanged.disconnect()...
        self.ui_add.tabWidget.setTabIcon(1,QtGui.QIcon())
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
        self.thread_anime_index.quit()
        self.dict_anime_index = dict_anime_index
        self.downloader_anime_index = None
        self.seach_request_completed()
    
    def request_search_anime_tosho(self,anime):
        """
        Creates a new thread to seach on this site.

        :type anime: db.Anime
        :param anime: Anime to search for.
        """
        self.thread_anime_tosho = QtCore.QThread(self.dialog_add)
        self.downloader_anime_tosho = Downloader()
        self.downloader_anime_tosho.moveToThread(self.thread_anime_tosho)
        self.downloader_anime_tosho.runningSearch.connect(self.searching_anime_tosho)
        self.downloader_anime_tosho.searchResult.connect(self.results_anime_tosho)
        self.downloader_anime_tosho.finish.connect(self.thread_anime_tosho.quit)
        self.thread_anime_tosho.start()
        self.dialog_add.request_search_anime_tosho.connect(self.downloader_anime_tosho.execute_once_search_anime_tosho)
        self.dialog_add.request_search_anime_tosho.emit(anime)
    def searching_anime_tosho(self):
        """
        Search started, show "loading" animation on this site's tab.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.connect(self.set_tab_anime_tosho_icon)  # PyCharm doesn't recognize frameChanged.connect()...
        self.loading_movie.start()
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
    def results_anime_tosho(self,dict_anime_tosho):
        """
        Results returned, update window.

        :type dict_anime_tosho: dict
        :param dict_anime_tosho: Search results.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.disconnect(self.set_tab_anime_tosho_icon)  # PyCharm doesn't recognize frameChanged.disconnect()...
        self.ui_add.tabWidget.setTabIcon(2,QtGui.QIcon())
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
        self.thread_anime_tosho.quit()
        self.dict_anime_tosho = dict_anime_tosho
        self.downloader_anime_tosho = None
        self.seach_request_completed()

    def request_search_anirena(self,anime):
        """
        Creates a new thread to seach on this site.

        :type anime: db.Anime
        :param anime: Anime to search for.
        """
        self.thread_anirena = QtCore.QThread(self.dialog_add)
        self.downloader_anirena = Downloader()
        self.downloader_anirena.moveToThread(self.thread_anirena)
        self.downloader_anirena.runningSearch.connect(self.searching_anirena)
        self.downloader_anirena.searchResult.connect(self.results_anirena)
        self.downloader_anirena.finish.connect(self.thread_anirena.quit)
        self.thread_anirena.start()
        self.dialog_add.request_search_anirena.connect(self.downloader_anirena.execute_once_search_anirena)
        self.dialog_add.request_search_anirena.emit(anime)
    def searching_anirena(self):
        """
        Search started, show "loading" animation on this site's tab.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.connect(self.set_tab_anirena_icon)  # PyCharm doesn't recognize frameChanged.connect()...
        self.loading_movie.start()
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
    def results_anirena(self,dict_anirena):
        """
        Results returned, update window.

        :type dict_anirena: dict
        :param dict_anirena: Search results.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.disconnect(self.set_tab_anirena_icon)  # PyCharm doesn't recognize frameChanged.disconnect()...
        self.ui_add.tabWidget.setTabIcon(3,QtGui.QIcon())
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
        self.thread_anirena.quit()
        self.dict_anirena = dict_anirena
        self.downloader_anirena = None
        self.seach_request_completed()

    def request_search_nyaa(self,anime):
        """
        Creates a new thread to seach on this site.

        :type anime: db.Anime
        :param anime: Anime to search for.
        """
        self.thread_nyaa = QtCore.QThread(self.dialog_add)
        self.downloader_nyaa = Downloader()
        self.downloader_nyaa.moveToThread(self.thread_nyaa)
        self.downloader_nyaa.runningSearch.connect(self.searching_nyaa)
        self.downloader_nyaa.searchResult.connect(self.results_nyaa)
        self.downloader_nyaa.finish.connect(self.thread_nyaa.quit)
        self.thread_nyaa.start()
        self.dialog_add.request_search_nyaa.connect(self.downloader_nyaa.execute_once_search_nyaa)
        self.dialog_add.request_search_nyaa.emit(anime)
    def searching_nyaa(self):
        """
        Search started, show "loading" animation on this site's tab.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.connect(self.set_tab_nyaa_icon)  # PyCharm doesn't recognize frameChanged.connect()...
        self.loading_movie.start()
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
    def results_nyaa(self,dict_nyaa):
        """
        Results returned, update window.

        :type dict_nyaa: dict
        :param dict_nyaa: Search results.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.disconnect(self.set_tab_nyaa_icon)  # PyCharm doesn't recognize frameChanged.disconnect()...
        self.ui_add.tabWidget.setTabIcon(4,QtGui.QIcon())
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
        self.thread_nyaa.quit()
        self.dict_nyaa = dict_nyaa
        self.downloader_nyaa = None
        self.seach_request_completed()
    
    def request_search_tokyotosho(self,anime):
        """
        Creates a new thread to seach on this site.

        :type anime: db.Anime
        :param anime: Anime to search for.
        """
        self.thread_tokyotosho = QtCore.QThread(self.dialog_add)
        self.downloader_tokyotosho = Downloader()
        self.downloader_tokyotosho.moveToThread(self.thread_tokyotosho)
        self.downloader_tokyotosho.runningSearch.connect(self.searching_tokyotosho)
        self.downloader_tokyotosho.searchResult.connect(self.results_tokyotosho)
        self.downloader_tokyotosho.finish.connect(self.thread_tokyotosho.quit)
        self.thread_tokyotosho.start()
        self.dialog_add.request_search_tokyotosho.connect(self.downloader_tokyotosho.execute_once_search_tokyotosho)
        self.dialog_add.request_search_tokyotosho.emit(anime)
    def searching_tokyotosho(self):
        """
        Search started, show "loading" animation on this site's tab.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.connect(self.set_tab_tokyotosho_icon)  # PyCharm doesn't recognize frameChanged.connect()...
        self.loading_movie.start()
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
    def results_tokyotosho(self,dict_tokyotosho):
        """
        Results returned, update window.

        :type dict_tokyotosho: dict
        :param dict_tokyotosho: Search results.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.disconnect(self.set_tab_tokyotosho_icon)  # PyCharm doesn't recognize frameChanged.disconnect()...
        self.ui_add.tabWidget.setTabIcon(5,QtGui.QIcon())
        self.dialog_add.repaint()
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents)
        self.thread_tokyotosho.quit()
        self.dict_tokyotosho = dict_tokyotosho
        self.downloader_tokyotosho = None
        self.seach_request_completed()

    def seach_request_completed(self):
        """
        Search request from a site completed.
        When all requested sites finish, will update the tabs with the results found.
        """
        if (not self.anime_being_searched.check_anime_index or (self.anime_being_searched.check_anime_index and self.dict_anime_index is not None))      and\
                (not self.anime_being_searched.check_anime_tosho or (self.anime_being_searched.check_anime_tosho and self.dict_anime_tosho is not None)) and\
                (not self.anime_being_searched.check_anirena     or (self.anime_being_searched.check_anirena     and self.dict_anirena is not None))     and\
                (not self.anime_being_searched.check_nyaa        or (self.anime_being_searched.check_nyaa        and self.dict_nyaa is not None))        and\
                (not self.anime_being_searched.check_tokyotosho  or (self.anime_being_searched.check_tokyotosho  and self.dict_tokyotosho is not None)):
            list_results_anime_index = []
            list_results_anime_tosho = []
            list_results_anirena = []
            list_results_nyaa = []
            list_results_tokyotosho = []

            if self.dict_anime_index is not None:
                html_anime_index,list_results_anime_index = self.parse_results_anime_index(self.dict_anime_index)
                self.ui_add.text_results_anime_index.setHtml(html_anime_index)
                self.ui_add.text_results_anime_index.setEnabled(True)
                self.ui_add.tab_anime_index.setEnabled(True)
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_anime_index),True)
            else:
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_anime_index),False)

            if self.dict_anime_tosho is not None:
                html_anime_tosho,list_results_anime_tosho = self.parse_results_anime_tosho(self.dict_anime_tosho)
                self.ui_add.text_results_anime_tosho.setHtml(html_anime_tosho)
                self.ui_add.text_results_anime_tosho.setEnabled(True)
                self.ui_add.tab_anime_tosho.setEnabled(True)
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_anime_tosho),True)
            else:
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_anime_tosho),False)

            if self.dict_anirena is not None:
                html_anirena,list_results_anirena = self.parse_results_anirena(self.dict_anirena)
                self.ui_add.text_results_anirena.setHtml(html_anirena)
                self.ui_add.text_results_anirena.setEnabled(True)
                self.ui_add.tab_anirena.setEnabled(True)
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_anirena),True)
            else:
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_anirena),False)

            if self.dict_nyaa is not None:
                html_nyaa,list_results_nyaa = self.parse_results_nyaa(self.dict_nyaa)
                self.ui_add.text_results_nyaa.setHtml(html_nyaa)
                self.ui_add.text_results_nyaa.setEnabled(True)
                self.ui_add.tab_nyaa.setEnabled(True)
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_nyaa),True)
            else:
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_nyaa),False)

            if self.dict_tokyotosho is not None:
                html_tokyotosho,list_results_tokyotosho = self.parse_results_tokyotosho(self.dict_tokyotosho)
                self.ui_add.text_results_tokyotosho.setHtml(html_tokyotosho)
                self.ui_add.text_results_tokyotosho.setEnabled(True)
                self.ui_add.tab_tokyotosho.setEnabled(True)
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_tokyotosho),True)
            else:
                self.ui_add.tabWidget.setTabEnabled(self.ui_add.tabWidget.indexOf(self.ui_add.tab_tokyotosho),False)

            html_all = self.parse_results_all(list_results_anime_index,list_results_anime_tosho,list_results_anirena,
                                               list_results_nyaa,list_results_tokyotosho)

            self.ui_add.text_results_all.setHtml(html_all)
            self.ui_add.text_results_all.setEnabled(True)
            self.ui_add.tab_all.setEnabled(True)
            self.ui_add.tabWidget.setEnabled(True)

            self.anime_being_searched = None
            self.dict_anime_index = None
            self.dict_anime_tosho = None
            self.dict_anirena = None
            self.dict_nyaa = None
            self.dict_tokyotosho = None
            self.search_finished()

            # Enable everything else again
            self.ui_add.button_search.setEnabled(True)
            self.ui_add.text_name.setEnabled(True)
            self.ui_add.label_name.setEnabled(True)
            self.ui_add.label_search.setEnabled(True)
            self.ui_add.text_search.setEnabled(True)
            self.ui_add.label_episode.setEnabled(True)
            self.ui_add.text_episode.setEnabled(True)
            self.ui_add.checkbox_anime_index.setEnabled(True)
            self.ui_add.checkbox_anime_tosho.setEnabled(True)
            self.ui_add.checkbox_anirena.setEnabled(True)
            self.ui_add.checkbox_nyaa.setEnabled(True)
            self.ui_add.checkbox_tokyotosho.setEnabled(True)
            self.ui_add.button_add.setEnabled(True)

            if torrent_application.is_utorrent():
                self.ui_add.groupbox_anime_folder.setStyleSheet("")
                self.ui_add.groupbox_anime_folder.setEnabled(True)
                if self.has_default_folder:
                    self.ui_add.radio_use_default_anime_folder.setEnabled(True)
                self.ui_add.radio_use_another_anime_folder.setEnabled(True)
                if self.ui_add.radio_use_another_anime_folder.isChecked():
                    self.ui_add.button_anime_folder.setEnabled(True)
                    self.ui_add.text_anime_folder.setEnabled(True)

    @staticmethod
    def parse_results_anime_index(dict_anime_index):
        """
        Parse results from this site to generate html and list.

        :type dict_anime_index: dict
        :param dict_anime_index: Seach results.

        :rtype: str,list[str]
        :return: html, list with the results' filename.
        """
        list_results_anime_index = []
        if len(dict_anime_index)>0:
            for result in dict_anime_index:
                list_results_anime_index.append((dict_anime_index[result]["title"],dict_anime_index[result]["downloads"]))
            list_results_anime_index.sort(key=lambda x:x[0],reverse=True)

            html_anime_index = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                              <tr>\
                              <td style=\"padding-right: 5px;\"><b>Result</b></td>\
                              <td style=\"padding-left: 5px;\" align=\"center\"><b>Downloads</b></td>\
                              </tr>"
            for title,downloads in list_results_anime_index:
                html_anime_index+="<tr>\
                                  <td style=\"padding-right: 5px;\">"+title+"</td>\
                                  <td style=\"padding-left: 5px;\" align=\"center\">"+str(downloads)+"</td>\
                                  </tr>"
            html_anime_index+="</table>"
            list_results_anime_index = [title for title,downloads in list_results_anime_index]
        else:
            html_anime_index = "No results."
        return html_anime_index,list_results_anime_index
    @staticmethod
    def parse_results_anime_tosho(dict_anime_tosho):
        """
        Parse results from this site to generate html and list.

        :type dict_anime_tosho: dict
        :param dict_anime_tosho: Seach results.

        :rtype: str,list[str]
        :return: html, list with the results' filename.
        """
        list_results_anime_tosho = []
        if len(dict_anime_tosho)>0:
            for result in dict_anime_tosho:
                list_results_anime_tosho.append(dict_anime_tosho[result]["title"])
            list_results_anime_tosho.sort(reverse=True)

            html_anime_tosho = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                              <tr>\
                              <td style=\"padding-right: 5px;\"><b>Result</b></td>\
                              </tr>"
            for title in list_results_anime_tosho:
                html_anime_tosho+="<tr>\
                                  <td style=\"padding-right: 5px;\">"+title+"</td>\
                                  </tr>"
            html_anime_tosho+="</table>"
        else:
            html_anime_tosho = "No results."
        return html_anime_tosho,list_results_anime_tosho
    @staticmethod
    def parse_results_anirena(dict_anirena):
        """
        Parse results from this site to generate html and list.

        :type dict_anirena: dict
        :param dict_anirena: Seach results.

        :rtype: str,list[str]
        :return: html, list with the results' filename.
        """
        list_results_anirena = []
        if len(dict_anirena)>0:
            for result in dict_anirena:
                list_results_anirena.append((dict_anirena[result]["title"],dict_anirena[result]["downloads"]))
            list_results_anirena.sort(key=lambda x:x[0],reverse=True)

            html_anirena = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                              <tr>\
                              <td style=\"padding-right: 5px;\"><b>Result</b></td>\
                              <td style=\"padding-left: 5px;\" align=\"center\"><b>Downloads</b></td>\
                              </tr>"
            for title,downloads in list_results_anirena:
                html_anirena+="<tr>\
                                  <td style=\"padding-right: 5px;\">"+title+"</td>\
                                  <td style=\"padding-left: 5px;\" align=\"center\">"+str(downloads)+"</td>\
                                  </tr>"
            html_anirena+="</table>"
            list_results_anirena = [title for title,downloads in list_results_anirena]
        else:
            html_anirena = "No results."
        return html_anirena,list_results_anirena
    @staticmethod
    def parse_results_nyaa(dict_nyaa):
        """
        Parse results from this site to generate html and list.

        :type dict_nyaa: dict
        :param dict_nyaa: Seach results.

        :rtype: str,list[str]
        :return: html, list with the results' filename.
        """
        list_results_nyaa = []
        if len(dict_nyaa)>0:
            for result in dict_nyaa:
                list_results_nyaa.append((dict_nyaa[result]["title"],dict_nyaa[result]["downloads"],dict_nyaa[result]["date"]))
            list_results_nyaa.sort(key=lambda x:x[0],reverse=True)

            has_date = False
            if list_results_nyaa[0][2] is None:
                html_nyaa = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                            <tr>\
                            <td style=\"padding-right: 5px;\"><b>Result</b></td>\
                            <td style=\"padding-left: 5px;\" align=\"center\"><b>Downloads</b></td>\
                            </tr>"
            else:
                has_date = True
                html_nyaa = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                            <tr>\
                            <td style=\"padding-right: 5px;\"><b>Result</b></td>\
                            <td style=\"width: 45px;padding-right: 5px;padding-left: 5px;\" align=\"center\"><b>Downloads</b></td>\
                            <td style=\"padding-left: 5px;\" align=\"center\"><b>Date</b></td>\
                            </tr>"
            for title,downloads,date in list_results_nyaa:
                if has_date:
                    html_nyaa+="<tr>\
                                <td style=\"padding-right: 5px;\">"+title+"</td>\
                                <td style=\"padding-right: 5px;padding-left: 5px;\" align=\"center\">"+str(downloads)+"</td>\
                                <td style=\"padding-left: 5px;\" align=\"center\">"+str(date)+"</td>\
                                </tr>"
                else:
                    html_nyaa+="<tr>\
                                <td style=\"padding-right: 5px;\">"+title+"</td>\
                                <td style=\"padding-left: 5px;\" align=\"center\">"+str(downloads)+"</td>\
                                </tr>"
            html_nyaa+="</table>"
            list_results_nyaa = [title for title,downloads,date in list_results_nyaa]
        else:
            html_nyaa = "No results."
        return html_nyaa,list_results_nyaa
    @staticmethod
    def parse_results_tokyotosho(dict_tokyotosho):
        """
        Parse results from this site to generate html and list.

        :type dict_tokyotosho: dict
        :param dict_tokyotosho: Seach results.

        :rtype: str,list[str]
        :return: html, list with the results' filename.
        """
        list_results_tokyotosho = []
        if len(dict_tokyotosho)>0:
            for result in dict_tokyotosho:
                list_results_tokyotosho.append((dict_tokyotosho[result]["title"],dict_tokyotosho[result]["date"]))
            list_results_tokyotosho.sort(key = lambda x:x[0], reverse=True)

            has_date = False
            if list_results_tokyotosho[0][1] is None:
                html_tokyotosho = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                                  <tr>\
                                  <td style=\"padding-right: 5px;\"><b>Result</b></td>\
                                  <td style=\"padding-left: 5px;\" align=\"center\"><b>No extra information has been provided by this site.</b></td>\
                                  </tr>"
            else:
                has_date = True
                html_tokyotosho = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                                  <tr>\
                                  <td style=\"padding-right: 5px;\"><b>Result</b></td>\
                                  <td style=\"padding-left: 5px;\" align=\"center\"><b>Date</b></td>\
                                  </tr>"
            for title,date in list_results_tokyotosho:
                if has_date:
                    html_tokyotosho+="<tr>\
                                      <td style=\"padding-right: 5px;\">"+title+"</td>\
                                      <td style=\"padding-left: 5px;\" align=\"center\">"+str(date)+"</td>\
                                      <td></td>\
                                      </tr>"
                else:
                    html_tokyotosho+="<tr>\
                                      <td style=\"padding-right: 5px;\">"+title+"</td>\
                                      <td></td>\
                                      </tr>"

            html_tokyotosho+="</table>"
            list_results_tokyotosho = [title for title,date in list_results_tokyotosho]
        else:
            html_tokyotosho = "No results."
        return html_tokyotosho,list_results_tokyotosho
    @staticmethod
    def parse_results_all(list_results_anime_index,list_results_anime_tosho,list_results_anirena,list_results_nyaa,list_results_tokyotosho):
        """
        Parse results from all sites to generate "All" tab html.

        :param list_results_anime_index: Seach results' filename.
        :param list_results_anime_tosho: Seach results' filename.
        :param list_results_anirena: Seach results' filename.
        :param list_results_nyaa: Seach results' filename.
        :param list_results_tokyotosho: Seach results' filename.

        :rtype: str
        :return: html
        """
        list_results_all = list(set(list_results_anime_index+list_results_anime_tosho+list_results_anirena+
                                    list_results_nyaa+list_results_tokyotosho))
        if len(list_results_all)>0:
            list_results_all.sort(reverse=True)
            html_all = "<table style=\"font-family:'MS Shell Dlg 2',monospace; font-size:14\">\
                        <tr>\
                        <td style=\"padding-right: 5px;\"><b>Result</b></td>"
            if len(list_results_anime_index)>0:
                html_all += "<td style=\"width: 45px;padding-right: 5px;padding-left: 5px;\" align=\"center\"><b>Anime-Index</b></td>"
            if len(list_results_anime_tosho)>0:
                html_all += "<td style=\"width: 45px;padding-right: 5px;padding-left: 5px;\" align=\"center\"><b>Anime Tosho</b></td>"
            if len(list_results_anirena)>0:
                html_all += "<td style=\"width: 45px;padding-right: 5px;padding-left: 5px;\" align=\"center\"><b>Anirena</b></td>"
            if len(list_results_nyaa)>0:
                html_all += "<td style=\"width: 45px;padding-right: 5px;padding-left: 5px;\" align=\"center\"><b>Nyaa</b></td>"
            if len(list_results_tokyotosho)>0:
                html_all += "<td style=\"width: 45px;padding-left: 5px;\" align=\"center\"><b>Tokyo Toshokan</b></td>"
            html_all += "</tr>"

            for result in list_results_all:
                html_all+="<tr><td style=\"padding-right: 5px;\">"+result+"</td>"
                if len(list_results_anime_index)>0:
                    if result in list_results_anime_index:
                        html_all+="<td align=\"center\">X</td>"
                    else:
                        html_all+="<td align=\"center\"> </td>"
                if len(list_results_anime_tosho)>0:
                    if result in list_results_anime_tosho:
                        html_all+="<td align=\"center\">X</td>"
                    else:
                        html_all+="<td align=\"center\"> </td>"
                if len(list_results_anirena)>0:
                    if result in list_results_anirena:
                        html_all+="<td align=\"center\">X</td>"
                    else:
                        html_all+="<td align=\"center\"> </td>"
                if len(list_results_nyaa)>0:
                    if result in list_results_nyaa:
                        html_all+="<td align=\"center\">X</td>"
                    else:
                        html_all+="<td align=\"center\"> </td>"
                if len(list_results_tokyotosho)>0:
                    if result in list_results_tokyotosho:
                        html_all+="<td align=\"center\">X</td></tr>"
                    else:
                        html_all+="<td align=\"center\"> </td></tr>"
            html_all+="</table>"
        else:
            html_all = "No results.<br/>" \
                       "Try editing the search terms or wait a few days in case this anime started airing recently."
        return html_all

    def search_finished(self):
        """
        Search finished; remove "loading" animation from "All" tab.
        """
        # noinspection PyUnresolvedReferences
        self.loading_movie.frameChanged.disconnect(self.set_tab_all_icon)  # PyCharm doesn't recognize frameChanged.disconnect()...
        self.ui_add.tabWidget.setTabIcon(0,QtGui.QIcon())
        self.loading_movie.stop()
        self.dialog_add.repaint()

    def button_add_clicked(self):
        """
        Add anime to the DB.
        """
        name = read_qt_text(self.ui_add.text_name.text())
        search = read_qt_text(self.ui_add.text_search.toPlainText().simplified())
        try:
            episode_number = int(self.ui_add.text_episode.text())
        except ValueError:
            episode_number = -1
        search_anime_index = self.ui_add.checkbox_anime_index.isChecked()
        search_anime_tosho = self.ui_add.checkbox_anime_tosho.isChecked()
        search_anirena = self.ui_add.checkbox_anirena.isChecked()
        search_nyaa = self.ui_add.checkbox_nyaa.isChecked()
        search_tokyotosho = self.ui_add.checkbox_tokyotosho.isChecked()
        if self.ui_add.radio_use_default_anime_folder.isChecked():
            download_folder = self.default_anime_folder
        else:
            download_folder = read_qt_text(self.ui_add.text_anime_folder.text())

        error = False
        if len(name)==0:
            show_ok_message("Error","The anime must have a name.",QtGui.QMessageBox.Warning)
            error = True
        elif self.anime_name_already_exists(name):
            show_ok_message("Error","An anime with the same name already exists.",QtGui.QMessageBox.Warning)
            error = True
        if len(search)==0:
            show_ok_message("Error","The 'search' field is empty.",QtGui.QMessageBox.Warning)
            error = True
        elif len(search)>0 and search!=self.last_text_search_checked:
            show_ok_message("Error","The search terms were changed but a new search wasn't made.\n"
                                    "Please click the [Search] button to make sure the results found are those you expect.",QtGui.QMessageBox.Warning)
            error = True
        if not search_anime_index and not search_anime_tosho and not search_anirena and not search_nyaa and not search_tokyotosho:
            show_ok_message("Error","At least one site must be selected.",QtGui.QMessageBox.Warning)
            error = True
        if episode_number<0 or episode_number>999:
            show_ok_message("Error","The episode number must be between 0 and 999.",QtGui.QMessageBox.Warning)
            error = True
        if not os.path.isdir(download_folder) and torrent_application.is_utorrent():
            if download_folder=="":
                if not error and (not self.editing or (self.editing and self.anime_to_edit.download_folder!="")):
                    selection = show_yes_no_message("No folder?","Are you sure you do not want to specify a folder for this anime?\n"
                                                                 "That means uTorrent will choose where to save downloaded episodes.")
                    error = (selection==QtGui.QMessageBox.No)
            else:
                show_ok_message("Error","The anime download folder selected is invalid.",QtGui.QMessageBox.Warning)
                error = True

        if not error and episode_number==0:
            selection = show_yes_no_message("Episode number 00","Are you sure the episode number is 00?\n\n"
                                                                "If it is not, please click 'No' and change the number.")
            error = (selection==QtGui.QMessageBox.No)

        if not error:
            if self.editing:
                if self.anime_to_edit.name!=name: self.anime_to_edit.update_name(name)
                if self.anime_to_edit.search_terms!=search: self.anime_to_edit.update_search_terms(search)
                if self.anime_to_edit.episode!=episode_number: self.anime_to_edit.update_episode(episode_number)
                if self.anime_to_edit.check_anime_index!=search_anime_index: self.anime_to_edit.update_check_anime_index(search_anime_index)
                if self.anime_to_edit.check_anime_tosho!=search_anime_tosho: self.anime_to_edit.update_check_anime_tosho(search_anime_tosho)
                if self.anime_to_edit.check_anirena!=search_anirena: self.anime_to_edit.update_check_anirena(search_anirena)
                if self.anime_to_edit.check_nyaa!=search_nyaa: self.anime_to_edit.update_check_nyaa(search_nyaa)
                if self.anime_to_edit.check_tokyotosho!=search_tokyotosho: self.anime_to_edit.update_check_tokyotosho(search_tokyotosho)
                if self.anime_to_edit.download_folder!=download_folder: self.anime_to_edit.update_download_folder(download_folder)
                self.main_window.update_anime_table()
                self.dialog_add.reject()
            else:
                new_anime = db.Anime(True,name,episode_number,1,search,"",download_folder,search_nyaa,search_tokyotosho)
                anime_added = db.DBManager().insert_anime(new_anime)
                if anime_added:
                    self.main_window.update_anime_table()
                    self.dialog_add.reject()
                else:
                    show_ok_message("Error","Error adding anime to database.",QtGui.QMessageBox.Critical)

    def anime_name_already_exists(self,name):
        """
        :type name: str or unicode
        :param name: Name of the anime the user wants to add.

        :rtype: bool
        :return: If an anime with this anime already exists in the DB or not.
        """
        if self.editing and self.anime_to_edit.name==name:
            return False
        else:
            anime_list = db.DBManager().get_anime_list()
            for anime in anime_list:
                if anime.name==name:
                    return True
        return False

    def set_tab_all_icon(self):
        """
        Updates the tab "loading" animation.
        """
        self.ui_add.tabWidget.setTabIcon(0,QtGui.QIcon(self.loading_movie.currentPixmap()))
    def set_tab_anime_index_icon(self):
        """
        Updates the tab "loading" animation.
        """
        self.ui_add.tabWidget.setTabIcon(1,QtGui.QIcon(self.loading_movie.currentPixmap()))
    def set_tab_anime_tosho_icon(self):
        """
        Updates the tab "loading" animation.
        """
        self.ui_add.tabWidget.setTabIcon(2,QtGui.QIcon(self.loading_movie.currentPixmap()))
    def set_tab_anirena_icon(self):
        """
        Updates the tab "loading" animation.
        """
        self.ui_add.tabWidget.setTabIcon(3,QtGui.QIcon(self.loading_movie.currentPixmap()))
    def set_tab_nyaa_icon(self):
        """
        Updates the tab "loading" animation.
        """
        self.ui_add.tabWidget.setTabIcon(4,QtGui.QIcon(self.loading_movie.currentPixmap()))
    def set_tab_tokyotosho_icon(self):
        """
        Updates the tab "loading" animation.
        """
        self.ui_add.tabWidget.setTabIcon(5,QtGui.QIcon(self.loading_movie.currentPixmap()))

    def close_window(self):
        """
        If anything changed, asks if the user will discard changes.

        :rtype: bool
        :return: If the window can be closed or not.
        """
        new_name = read_qt_text(self.ui_add.text_name.text())
        new_search = read_qt_text(self.ui_add.text_search.toPlainText())
        try:
            new_episode_number = int(self.ui_add.text_episode.text())
        except ValueError:
            new_episode_number = -1
        new_search_anime_index = self.ui_add.checkbox_anime_index.isChecked()
        new_search_anime_tosho = self.ui_add.checkbox_anime_tosho.isChecked()
        new_search_anirena = self.ui_add.checkbox_anirena.isChecked()
        new_search_nyaa = self.ui_add.checkbox_nyaa.isChecked()
        new_search_tokyotosho = self.ui_add.checkbox_tokyotosho.isChecked()
        if self.ui_add.radio_use_default_anime_folder.isChecked():
            new_download_folder = self.default_anime_folder
        else:
            new_download_folder = read_qt_text(self.ui_add.text_anime_folder.text())
        if self.editing:
            if new_name != self.anime_to_edit.name or \
                    new_search             != self.anime_to_edit.search_terms or \
                   (new_episode_number     != self.anime_to_edit.episode and new_episode_number!=-1) or \
                    new_search_anime_index != self.anime_to_edit.check_anime_index or \
                    new_search_anime_tosho != self.anime_to_edit.check_anime_tosho or \
                    new_search_anirena     != self.anime_to_edit.check_anirena or \
                    new_search_nyaa        != self.anime_to_edit.check_nyaa or \
                    new_search_tokyotosho  != self.anime_to_edit.check_tokyotosho or \
                    new_download_folder    != self.anime_to_edit.download_folder:
                selection = show_yes_no_message("Cancel changes","All changes will be lost!\nAre you sure?")
                return selection == QtGui.QMessageBox.Yes
            else:
                return True
        else:
            selection = show_yes_no_message("Cancel new anime","Are you sure you do not want to add this anime?")
            return selection == QtGui.QMessageBox.Yes


class WindowAddDialog(QtGui.QDialog):
    """
    Overrides default QDialog class to be able to control the close window event.
    Also allow access to the mouse position, which enables the information box to work.
    """

    request_search_anime_index = QtCore.pyqtSignal(object)
    request_search_anime_tosho = QtCore.pyqtSignal(object)
    request_search_anirena = QtCore.pyqtSignal(object)
    request_search_nyaa = QtCore.pyqtSignal(object)
    request_search_tokyotosho = QtCore.pyqtSignal(object)

    def __init__(self, window, parent=None, params=None):
        super(WindowAddDialog, self).__init__(parent,params)
        self.window = window
        self.current_explanation = None

        # At this point the UI hasn't been created yet, so window.ui_add.* doesn't exist
        self.information_name_widgets = None
        self.information_search_widgets = None
        self.information_episode_widgets = None
        self.information_sources_widgets = None
        self.information_table_widgets = None
        self.information_anime_folder_widgets = None

    def closeEvent(self, evnt):
        """
        If the user tries to close the window, ask for confirmation.
        Stops any search threads running.

        :type evnt: QCloseEvent
        :param evnt: Describes the close event.
        """
        close_window = self.window.close_window()
        if not close_window:
            evnt.ignore()
        else:
            if self.window.downloader_anime_index is not None:
                self.window.downloader_anime_index.stop_thread()
            if self.window.downloader_anime_tosho is not None:
                self.window.downloader_anime_tosho.stop_thread()
            if self.window.downloader_anirena is not None:
                self.window.downloader_anirena.stop_thread()
            if self.window.downloader_nyaa is not None:
                self.window.downloader_nyaa.stop_thread()
            if self.window.downloader_tokyotosho is not None:
                self.window.downloader_tokyotosho.stop_thread()

    def eventFilter(self, obj, event):
        """
        Allows manipulation of the action when a certain event happens.
        Used to make the information box work.

        :param obj: Widget that generated the event.
        :param event: Event that happened with the given object.

        :rtype: bool
        :return: If the event should stop being processed or not. Always returns False.
        """
        if obj.objectName()!=self.current_explanation and (event.type()==QtCore.QEvent.HoverEnter or
                                                           event.type()==QtCore.QEvent.Enter or
                                                           event.type()==QtCore.QEvent.MouseMove):
            if self.information_name_widgets is None:
                self.information_name_widgets = [self.window.ui_add.text_name.objectName(),
                                                 self.window.ui_add.label_name.objectName()]
                self.information_search_widgets = [self.window.ui_add.text_search.objectName(),
                                                   self.window.ui_add.label_search.objectName()]
                self.information_episode_widgets = [self.window.ui_add.text_episode.objectName(),
                                                    self.window.ui_add.label_episode.objectName()]
                self.information_sources_widgets = [self.window.ui_add.checkbox_anime_index.objectName(),
                                                    self.window.ui_add.checkbox_anime_tosho.objectName(),
                                                    self.window.ui_add.checkbox_anirena.objectName(),
                                                    self.window.ui_add.checkbox_nyaa.objectName(),
                                                    self.window.ui_add.checkbox_tokyotosho.objectName()]
                self.information_table_widgets = [self.window.ui_add.tabWidget.objectName()]
                self.information_anime_folder_widgets = [self.window.ui_add.groupbox_anime_folder.objectName()]

            if not self.window.ui_add.text_search.isEnabled():
                self.window.ui_add.groupbox_information.setTitle("Information: Name")
                self.window.ui_add.label_information.setText("<html><head/><body>"
                                                             "<p>The name shown in the main screen.</p>"
                                                             "<p>Type the anime name and click [Search].</p>"
                                                             "<p>Afterwards, you can customize the search terms to better filter the results.</p>"
                                                             "</body></html>")
            else:
                if obj.objectName() in self.information_name_widgets:
                    self.window.ui_add.groupbox_information.setTitle("Information: Name")
                    self.window.ui_add.label_information.setText("<html><head/><body>"
                                                                 "<p>The name shown in the main screen.</p>"
                                                                 "<p>It has no effect on the search.</p>"
                                                                 "</body></html>")
                elif obj.objectName() in self.information_search_widgets:
                    self.window.ui_add.groupbox_information.setTitle("Information: Search")
                    self.window.ui_add.label_information.setText("<html><head/><body>"
                                                                 "<p>Search terms used to find anime episodes.</p>"
                                                                 "<p>A '-' sign excludes results with the following term (e.g. \"-480p\").</p>"
                                                                 "</body></html>")
                elif obj.objectName() in self.information_episode_widgets:
                    self.window.ui_add.groupbox_information.setTitle("Information: Episode Number")
                    self.window.ui_add.label_information.setText("<html><head/><body>"
                                                                 "<p>The episode to search for. When found, the number is increased automatically.</p>"
                                                                 "<p>Obs.: the results below do not take the episode number into consideration.</p>"
                                                                 "</body></html>")
                elif obj.objectName() in self.information_sources_widgets:
                    self.window.ui_add.groupbox_information.setTitle("Information: Torrent sources")
                    self.window.ui_add.label_information.setText("<html><head/><body>"
                                                                 "<p>Anime-Index: <a href=\"http://tracker.anime-index.org\">tracker.anime-index.org</a></p>"
                                                                 "<p>Anime Tosho: <a href=\"www.animetosho.org\">www.animetosho.org</a></p>"
                                                                 "<p>AniRena: <a href=\"www.anirena.com\">www.anirena.com</a></p>"
                                                                 "<p>Nyaa: <a href=\"www.nyaa.se\">www.nyaa.se</a></p>"
                                                                 "<p>Tokyo Toshokan: <a href=\"www.tokyotosho.info\">www.tokyotosho.info</a></p>"
                                                                 "</body></html>")
                elif obj.objectName() in self.information_table_widgets:
                    self.window.ui_add.groupbox_information.setTitle("Information: Search results")
                    self.window.ui_add.label_information.setText("<html><head/><body>"
                                                                 "<p>Results found in the sites selected.</p>"
                                                                 "<p>Please edit the search terms until the only results are those you expect.</p>"
                                                                 "</body></html>")
                elif obj.objectName() in self.information_anime_folder_widgets:
                    self.window.ui_add.groupbox_information.setTitle("Information: Anime download folder")
                    self.window.ui_add.label_information.setText("<html><head/><body>"
                                                                 "Only works with uTorrent.<br/>"
                                                                 "<p>Where uTorrent should save downloaded episodes.</p>"
                                                                 "<p>If no folder is selected, uTorrent will choose where to save.</p>"
                                                                 "</body></html>")
                self.current_explanation = obj.objectName()
        return False